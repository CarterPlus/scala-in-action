package closure

object ScalaClosure {
  // 闭包的定义
  var more = 10
  // addMore 一个闭包函数:因为其捕获了自由变量 more 从而闭合了该函数字面量
  val addMore = (x: Int) => x + more
  /*
  如上函数 addMore 中有两个变量 x 和 more:
  x : 是一个绑定变量 (bound variable)，因为其是该函数的入参，在函数的上下文中有明确的定义；
  more : 是一个自由变量 (free variable)，因为函数字面量本生并没有给 more 赋予任何含义。
  按照定义：在创建函数时，如果需要捕获自由变量，那么包含指向被捕获变量的引用的函数就被称为闭包函数。
   */

  // 闭包主要有以下两个特征
  // 1. 修改自由变量
  //这里需要注意的是，闭包捕获的是变量本身，即是对变量本身的引用，这意味着：
  //闭包外部对自由变量的修改，在闭包内部是可见的；
  //闭包内部对自由变量的修改，在闭包外部也是可见的。
  // 2.自由变量多副本
  // 自由变量可能随着程序的改变而改变，从而产生多个副本，但是闭包永远指向创建时候有效的那个变量副本。


}
